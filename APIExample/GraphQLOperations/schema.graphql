type Cars {
  Cylinders: String!
  EngineLocation: String!
  EngineSize: String!
  Entry: Int!
  HP: String!
  Manufacturer: String!
  Model: String!
  ModelYear: String!
  TQ: String!
  Trim: String!
  WheelDrive: String!
}

type CarsConnection {
  items: [Cars]
  nextToken: String
}

type Mutation {
  createCars(input: CreateCarsInput!): Cars
  deleteCars(input: DeleteCarsInput!): Cars
  updateCars(input: UpdateCarsInput!): Cars
}

type Query {
  getCars(Entry: Int!, Manufacturer: String!): Cars
  listCars(filter: TableCarsFilterInput, limit: Int, nextToken: String): CarsConnection
}

type Subscription {
  onCreateCars(Entry: Int, Manufacturer: String): Cars
    @aws_subscribe(mutations:["createCars"])
  onDeleteCars(Entry: Int, Manufacturer: String): Cars
    @aws_subscribe(mutations:["deleteCars"])
  onUpdateCars(Entry: Int, Manufacturer: String): Cars
    @aws_subscribe(mutations:["updateCars"])
}

input CreateCarsInput {
  Entry: Int!
  Manufacturer: String!
}

input DeleteCarsInput {
  Entry: Int!
  Manufacturer: String!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableCarsFilterInput {
  Entry: TableIntFilterInput
  Manufacturer: TableStringFilterInput
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateCarsInput {
  Entry: Int!
  Manufacturer: String!
}
